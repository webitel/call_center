// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cc_agent.proto

package cc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentService_Online_FullMethodName         = "/cc.AgentService/Online"
	AgentService_Offline_FullMethodName        = "/cc.AgentService/Offline"
	AgentService_Pause_FullMethodName          = "/cc.AgentService/Pause"
	AgentService_WaitingChannel_FullMethodName = "/cc.AgentService/WaitingChannel"
	AgentService_AcceptTask_FullMethodName     = "/cc.AgentService/AcceptTask"
	AgentService_CloseTask_FullMethodName      = "/cc.AgentService/CloseTask"
	AgentService_RunTrigger_FullMethodName     = "/cc.AgentService/RunTrigger"
)

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentServiceClient interface {
	Online(ctx context.Context, in *OnlineRequest, opts ...grpc.CallOption) (*OnlineResponse, error)
	Offline(ctx context.Context, in *OfflineRequest, opts ...grpc.CallOption) (*OfflineResponse, error)
	Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error)
	WaitingChannel(ctx context.Context, in *WaitingChannelRequest, opts ...grpc.CallOption) (*WaitingChannelResponse, error)
	AcceptTask(ctx context.Context, in *AcceptTaskRequest, opts ...grpc.CallOption) (*AcceptTaskResponse, error)
	CloseTask(ctx context.Context, in *CloseTaskRequest, opts ...grpc.CallOption) (*CloseTaskResponse, error)
	RunTrigger(ctx context.Context, in *RunTriggerRequest, opts ...grpc.CallOption) (*RunTriggerResponse, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) Online(ctx context.Context, in *OnlineRequest, opts ...grpc.CallOption) (*OnlineResponse, error) {
	out := new(OnlineResponse)
	err := c.cc.Invoke(ctx, AgentService_Online_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) Offline(ctx context.Context, in *OfflineRequest, opts ...grpc.CallOption) (*OfflineResponse, error) {
	out := new(OfflineResponse)
	err := c.cc.Invoke(ctx, AgentService_Offline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error) {
	out := new(PauseResponse)
	err := c.cc.Invoke(ctx, AgentService_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) WaitingChannel(ctx context.Context, in *WaitingChannelRequest, opts ...grpc.CallOption) (*WaitingChannelResponse, error) {
	out := new(WaitingChannelResponse)
	err := c.cc.Invoke(ctx, AgentService_WaitingChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AcceptTask(ctx context.Context, in *AcceptTaskRequest, opts ...grpc.CallOption) (*AcceptTaskResponse, error) {
	out := new(AcceptTaskResponse)
	err := c.cc.Invoke(ctx, AgentService_AcceptTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) CloseTask(ctx context.Context, in *CloseTaskRequest, opts ...grpc.CallOption) (*CloseTaskResponse, error) {
	out := new(CloseTaskResponse)
	err := c.cc.Invoke(ctx, AgentService_CloseTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) RunTrigger(ctx context.Context, in *RunTriggerRequest, opts ...grpc.CallOption) (*RunTriggerResponse, error) {
	out := new(RunTriggerResponse)
	err := c.cc.Invoke(ctx, AgentService_RunTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility
type AgentServiceServer interface {
	Online(context.Context, *OnlineRequest) (*OnlineResponse, error)
	Offline(context.Context, *OfflineRequest) (*OfflineResponse, error)
	Pause(context.Context, *PauseRequest) (*PauseResponse, error)
	WaitingChannel(context.Context, *WaitingChannelRequest) (*WaitingChannelResponse, error)
	AcceptTask(context.Context, *AcceptTaskRequest) (*AcceptTaskResponse, error)
	CloseTask(context.Context, *CloseTaskRequest) (*CloseTaskResponse, error)
	RunTrigger(context.Context, *RunTriggerRequest) (*RunTriggerResponse, error)
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServiceServer struct {
}

func (UnimplementedAgentServiceServer) Online(context.Context, *OnlineRequest) (*OnlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Online not implemented")
}
func (UnimplementedAgentServiceServer) Offline(context.Context, *OfflineRequest) (*OfflineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Offline not implemented")
}
func (UnimplementedAgentServiceServer) Pause(context.Context, *PauseRequest) (*PauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedAgentServiceServer) WaitingChannel(context.Context, *WaitingChannelRequest) (*WaitingChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitingChannel not implemented")
}
func (UnimplementedAgentServiceServer) AcceptTask(context.Context, *AcceptTaskRequest) (*AcceptTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptTask not implemented")
}
func (UnimplementedAgentServiceServer) CloseTask(context.Context, *CloseTaskRequest) (*CloseTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTask not implemented")
}
func (UnimplementedAgentServiceServer) RunTrigger(context.Context, *RunTriggerRequest) (*RunTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTrigger not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_Online_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Online(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_Online_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Online(ctx, req.(*OnlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_Offline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Offline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_Offline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Offline(ctx, req.(*OfflineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Pause(ctx, req.(*PauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_WaitingChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitingChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).WaitingChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_WaitingChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).WaitingChannel(ctx, req.(*WaitingChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AcceptTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AcceptTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_AcceptTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AcceptTask(ctx, req.(*AcceptTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_CloseTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).CloseTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_CloseTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).CloseTask(ctx, req.(*CloseTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_RunTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).RunTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_RunTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).RunTrigger(ctx, req.(*RunTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cc.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Online",
			Handler:    _AgentService_Online_Handler,
		},
		{
			MethodName: "Offline",
			Handler:    _AgentService_Offline_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _AgentService_Pause_Handler,
		},
		{
			MethodName: "WaitingChannel",
			Handler:    _AgentService_WaitingChannel_Handler,
		},
		{
			MethodName: "AcceptTask",
			Handler:    _AgentService_AcceptTask_Handler,
		},
		{
			MethodName: "CloseTask",
			Handler:    _AgentService_CloseTask_Handler,
		},
		{
			MethodName: "RunTrigger",
			Handler:    _AgentService_RunTrigger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cc_agent.proto",
}
