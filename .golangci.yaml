---
version: "2"

formatters:
  exclusions:
    generated: lax # Sources are excluded if they contain lines like `autogenerated file`, `code generated`, `do not edit`, etc.
    paths:
      - devenv
      - scripts
      - third_party$
      - builtin$
      - examples$

  enable:
    - gofmt # Format the code.
    - gofumpt # Same as gofmt, but with additional rules.
    - gci # Format the block of imports.

  settings:
    gofmt:
      # Simplify the code.
      # See: https://pkg.go.dev/cmd/gofmt#hdr-The_simplify_command
      simplify: true
      rewrite-rules:
        # Replace `interface{}` with `any` in the code on format.
        - pattern: "interface{}"
          replacement: "any"

    gofumpt:
      extra-rules: true # Choose whether to use the extra rules.

    # Make sure imports are always in a deterministic order.
    # See: https://github.com/daixiang0/gci/
    gci:
      # Section configuration to compare against.
      # Section names are case-insensitive and may contain parameters in ().
      # The default order of sections is `standard > default > custom > blank > dot > alias > localmodule`.
      # If `custom-order` is `true`, it follows the order of `sections` option.
      # Default: ["standard", "default"]
      sections:
        - standard # Standard section: captures all standard packages.
        - default # Default section: contains all imports that could not be matched to another section type.
        - prefix(buf.build/gen/go/webitel)
        - prefix(github.com/webitel)
        - localmodule # Local module section: contains all local packages.
        - blank # Blank section: contains all blank imports.
        - dot # Dot section: contains all dot imports.

      # Checks that no inline comments are present.
      no-inline-comments: true

      # Checks that no prefix comments (comment lines above an import) are present.
      no-prefix-comments: true

      # Enable custom order of sections.
      # If `true`, make the section order the same as the order of `sections`.
      custom-order: true

      # Drops lexical ordering for custom sections.
      no-lex-order: true

linters:
  exclusions:
    generated: lax # Sources are excluded if they contain lines like `autogenerated file`, `code generated`, `do not edit`, etc.
    paths:
      - devenv
      - scripts
      - third_party$
      - builtin$
      - examples$

    presets:
      # Exclude check on comments format in godoc
      # These are common false positives in poor code
      # you should not use this on recent code you write from scratch
      # More information: https://golangci-lint.run/usage/false-positives/#comments
      - comments

      # Common false positives
      # feel free to remove this if you don't have any false positives
      # More information: https://golangci-lint.run/usage/false-positives/#common-false-positives
      - common-false-positives

      # std-error-handling is a set of rules that avoid reporting unhandled errors on common functions/methods
      # More information: https://golangci-lint.run/usage/false-positives/#std-error-handling
      - std-error-handling

    rules:
      - path: _(test|gen)\.go
        linters:
          - canonicalheader
          - cyclop
          - dupl
          - errcheck
          - forcetypeassert
          - funlen
          - gocognit
          - goconst
          - lll
          - revive

  # Keep this list sorted alphabetically.
  # See: https://golangci-lint.run/usage/linters/
  enable:
    # Errcheck is a program for checking for unchecked errors in Go code.
    - errcheck

    # Vet examines Go source code and reports suspicious constructs.
    # See: https://pkg.go.dev/cmd/vet
    - govet

    # Detects when assignments to existing variables are not used.
    # Example:
    #     func main() {
    #         x := 10   // Assigned here...
    #         x = 20    // ...then overwritten without using previous value
    #
    #         fmt.Println("Done")
    #     }
    - ineffassign

    # It's a set of rules from staticcheck.
    # Finds bugs and performance issues, offers simplifications, and enforces style rules.
    # See: https://staticcheck.dev/docs/checks/
    - staticcheck

    # Checks Go code for unused constants, variables, functions and types.
    - unused

    # Checks that all code identifiers does not have non-ASCII
    # symbols (eg. `âˆ†` instead of `delta`) in the name.
    - asciicheck

    # Checks for dangerous unicode character sequences.
    # See: https://trojansource.codes/
    - bidichk

    # Checks whether HTTP response body is closed successfully.
    - bodyclose

    # Detects struct contained context.Context field.
    # See: https://go.dev/blog/context-and-structs
    - containedctx

    # Detects loop variables are copied.
    # See: https://go.dev/blog/loopvar-preview
    #
    # Example:
    #   for i := 1; i <= 3; i++ {
    #       i := i // The copy of the 'for' variable "i" can be deleted (Go 1.22+)
    #       _ = i
    #   }
    - copyloopvar

    - depguard

    # Embedded types should be at the top of the field list of a struct,
    # and there must be an empty line separating embedded fields from regular fields.
    # Example (ok):
    #   type Client struct {
    #       http.Client
    #
    #       version int
    #   }
    #
    # Example (bad):
    #   type Client struct {
    #       version int
    #       http.Client
    #   }
    - embeddedstructfieldcheck

    # Check exhaustiveness of enum switch statements.
    # See: https://github.com/nishanths/exhaustive
    - exhaustive

    # Checks if all structure fields are initialized.
    # - exhaustruct

    # Detects functions from golang.org/x/exp/ that
    # can be replaced by std functions.
    - exptostd

    # Detects nested contexts in loops or function literals
    - fatcontext

    # Checks the order of functions, methods, and constructors.
    # See: https://github.com/manuelarte/funcorder
    # - funcorder

    # Checks that go compiler directive comments (//go:) are valid.
    # Mistyping a directives name will cause the compiler to silently ignore the comment.
    - gocheckcompilerdirectives

    # Check that no global variables exist.
    # - gochecknoglobals

    # Provides diagnostics that check for bugs, performance and style issues.
    # Extensible without recompilation through dynamic rules.
    # Dynamic rules are written declaratively with AST patterns,
    # filters, report message and optional suggestion.
    - gocritic

    # Detects usage of FIXME, TODO and other keywords inside comments.
    # - godox

    # Inspects source code for security problems.
    # Add as own job not within golangci-lint to upload SARIF report.
    # - gosec

    # Analyze expression (imports, vars, const) groups.
    # - grouper

    # Find places where for loops could make use of an integer range.
    # See: https://github.com/ckaznocha/intrange
    - intrange

    # Finds commonly misspelled English words.
    - misspell

    # Suggests rewrites to avoid unnecessary []byte/string conversion
    - mirror

    # Checks that functions with naked returns are not longer
    # than a maximum size.
    # Example:
    #   func MissingMethod(V Type, T *Interface, static bool) (method *Func, wrongType bool) {
    #       // fast path for common case
    #	    if T.Empty() {
    #		    return
    #	    }
    #
    #       // over N lines
    #
    #       return // error
    #   }
    - nakedret

    # Checks that there is no simultaneous return of nil error and an invalid value.
    # See: https://github.com/gostaticanalysis/nilerr
    - nilnil

    # Checks for a new line before return and branch statements to increase code clarity.
    # Example:
    #   func foo() int {
    #       a := 0
    #       _ = a
    #                    // << New line before return
    #       return a
    #   }
    - nlreturn

    # Find slice declarations that could potentially be pre-allocated.
    # OK: init := make([]int64, 0, len(existing))
    # Bad: var init []int64
    - prealloc

    # Reports direct reads from proto message fields when getters should be used.
    # OK (zero value): v := m.GetFoo().GetBar().GetBaz().GetInt()
    # Bad (will panic if one struct in chain is not init.): v := m.Foo.Bar.Baz.Int
    - protogetter

    # Checks for receiver type consistency.
    # See: https://github.com/raeperd/recvcheck
    - recvcheck

    # Fast, configurable, extensible, flexible, and beautiful linter for Go.
    - revive

    # Checks for mistakes with OpenTelemetry/Census spans.
    - spancheck

    # Checks that sql.Rows, sql.Stmt, sqlx.NamedStmt, pgx.Query are closed
    - sqlclosecheck

    # Checks the struct tags.
    - tagliatelle

    # Make sure to use t.Helper() when needed
    - thelper

    # Reports uses of functions with replacement inside the testing package.
    - usetesting

    # Detect the possibility to use variables/constants from the Go standard library.
    - usestdlibvars

    # Finds wasted assignment statements.
    # - wastedassign

    # Add or remove empty lines.
    - wsl_v5

  settings:
    depguard:
      rules:
        main:
          deny:
            - pkg: io/ioutil
              desc: "deprecated: As of Go 1.16, the same functionality is now provided by package io or package os, and those implementations should be preferred in new code. See the specific function documentation for details"

            - pkg: gopkg.in/yaml.v2
              desc: Not allowed to depend on gopkg.in/yaml.v2 as gopkg.in/yaml.v3 is now available

            - pkg: github.com/pkg/errors
              desc: "deprecated: Go 1.13 supports the functionality provided by pkg/errors in the standard library"

            - pkg: github.com/gofrs/uuid
              desc: use github.com/google/uuid instead, which we already depend on

            - pkg: github.com/bmizerany/assert
              desc: Use github.com/stretchr/testify/assert instead, which we already depend on

            - pkg: "math/rand$"
              desc: use math/rand/v2 instead

            - pkg: github.com/golang/protobuf
              desc: use google.golang.org/protobuf instead

            - pkg: "log$"
              desc: use log/slog instead, which we already depend on

    errcheck:
      # Report `a := b.(MyStruct)` when `a, ok := ...` should be.
      check-type-assertions: true # Default: false

      # Report skipped checks:`num, _ := strconv.Atoi(numStr)`.
      check-blank: false
      exclude-functions:
        - io/ioutil.ReadFile
        - io.Copy(*bytes.Buffer)
        - io.Copy(os.Stdout)

    govet:
      disable:
        - fieldalignment

    misspell:
      # Correct spellings using locale preferences for US or UK.
      # Setting locale to US will correct the British spelling of 'colour' to 'color'.
      # Default ("") is to use a neutral variety of English.
      locale: US

      # List of words to ignore
      # among the one defined in https://github.com/golangci/misspell/blob/master/words.go
      ignore-rules:
        - "auther" # Custom authentication-related term, not a misspelling of "author"

      # Extra word corrections.
      extra-words: []
      #  - typo: "whattever"
      #    correction: "whatever"

    revive:
      rules:
        # Check for commonly mistaken usages of the sync/atomic package
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#atomic
        - name: atomic

        # Blank import should be only in a main or test package, or have a comment justifying it.
        - name: blank-imports

        # Using Boolean literals (true, false) in logic expressions may make the code less readable.
        - name: bool-literal-in-expr

        # Cognitive complexity is a measure of how hard code is to understand.
        # While cyclomatic complexity is good to measure "testability" of the code,
        # cognitive complexity aims to provide a more precise measure of the difficulty
        # of understanding the code.
        # Enforcing a maximum complexity per function helps to keep code readable and maintainable.
        # See: https://www.sonarsource.com/docs/CognitiveComplexity.pdf
        #
        # How hard is this code to read and understand?
        # Example:
        # - if x > 0: +1
        # - for: +1 (nesting level 1): +1
        # - if i%2 == 0: +1 (nesting level 2): +2
        #
        #   func foo(x int) {
        #       if x > 0 {
        #           for i := 0; i < x; i++ {
        #               if i%2 == 0 {
        #                   fmt.Println(i)
        #               }
        #           }
        #       }
        #   }
        # - name: cognitive-complexity
        # arguments: [7]

        # Spots comments of the form:
        # //This is a malformed comment: no space between // and the start of the sentence
        - name: comment-spacings

        # Methods or fields of struct that have names different
        # only by capitalization could be confusing.
        - name: confusing-naming

        # The rule spots logical expressions that evaluate always to the same value.
        - name: constant-logical-expr

        # context.Context() should be the first parameter of a function when provided as argument.
        - name: context-as-argument
          arguments:
            - allowTypesBefore: "*testing.T"

        # Basic types should not be used as a key in `context.WithValue`
        # See: https://pkg.go.dev/context#WithValue
        - name: context-keys-type

        # Cyclomatic complexity is a measure of code complexity.
        # Enforcing a maximum complexity per function helps to keep code readable and maintainable.
        # See: https://en.wikipedia.org/wiki/Cyclomatic_complexity
        #
        # How many test cases do I need?
        # Example:
        # Cyclomatic Complexity = 3
        #   1. a > 0 && b > 0
        #   2. a > 0 && b <= 0
        #   3. a <= 0
        #
        #   func example(a, b int) int {
        #	  if a > 0 {
        #		  if b > 0 {
        #			  return a + b
        #		  }
        #		  return a
        #	  }
        #	  return b
        #   }
        # - name: cyclomatic
        # arguments: [ 3 ]

        # This rule spots potential dataraces caused by goroutines capturing (by-reference)
        # particular identifiers of the function from which goroutines are created.
        # The rule is able to spot two of such cases:
        # - go-routines capturing named return values;
        # - go-routines capturing for-range values (before go1.22).
        - name: datarace

        # This rule warns on some common mistakes when using defer statement.
        # See: https://blog.learngoprogramming.com/gotchas-of-defer-in-go-1-8d070894cb01
        - name: defer
          arguments:
            - - "call-chain"
              - "loop"
              - "method-call"
              - "recover"
              - "immediate-recover"
              - "return"

        # Importing with `.` makes the programs much harder to understand
        - name: dot-imports

        - name: duplicated-imports

        # See: https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#early-return
        - name: early-return
          arguments:
            - "preserve-scope"
            - "allow-jump"

        # Empty blocks make code less readable and could be a symptom of a bug or unfinished refactoring.
        - name: empty-block

        # Enforces consistent usage of make(map[type]type) or map[type]type{} for map initialization.
        - name: enforce-map-style
          arguments:
            - "make"

        # Enforces consistent usage of make([]type, 0), []type{}, or var []type for slice initialization
        - name: enforce-slice-style
          arguments:
            - "make"

        # For better readability, variables of type `error` must be named with the prefix `err`.
        - name: error-naming

        # For better readability, the errors should be last in the list of returned values by a function.
        - name: error-return

        # For better readability, error messages should not be capitalized or end with punctuation or a newline.
        - name: error-strings

        # Report when replacing `errors.New(fmt.Sprintf())` with `fmt.Errorf()` is possible
        - name: errorf

        # check naming and commenting conventions on exported symbols.
        # - name: exported
        #   arguments:
        #   # make error messages clearer
        #   - "sayRepetitiveInsteadOfStutters"

        # Typically, functions with names prefixed with Get are supposed to return a value.
        - name: get-return

        # incrementing an integer variable by 1 is recommended to be done using the `++` operator
        - name: increment-decrement

        # highlights redundant else-blocks that can be eliminated from the code
        - name: indent-error-flow
          arguments:
            - "preserve-scope" # do not suggest refactorings that would increase variable scope

        # This rule suggests a shorter way of writing ranges that do not use the second value.
        - name: range

        # Receiver names in a method should reflect the struct name (p for Person, for example)
        - name: receiver-naming

        # Redefining built-in names (true, false, append, make) can lead to bugs very difficult to detect.
        - name: redefines-builtin-id

        # This rule warns on redundant import aliases.
        # This happens when the alias used on the import statement matches the imported package name.
        - name: redundant-import-alias

        # redundant else-blocks that can be eliminated from the code.
        - name: superfluous-else

        # Warns when using == and != for equality check time.Time and suggest to time.time.Equal method.
        - name: time-equal

        # prevent confusing name for variables when using `time` package
        - name: time-naming

        # Checks whether a type assertion result is checked (the ok value), preventing unexpected panics.
        - name: unchecked-type-assertion

        # Warns when errors returned by a function are not explicitly handled on the caller side.
        - name: unhandled-error
          arguments:
            - 'os\.(Create|WriteFile|Chmod)'
            - 'fmt\.Print'
            - "myFunction"
            - 'net\..*'
            - 'bytes\.Buffer\.Write'

        # identifies calls to formatting functions where the format string does not contain any formatting
        # verbs and recommends switching to the non-formatting, more efficient alternative.
        - name: unnecessary-format

        # spots and proposes to remove unreachable code. also helps to spot errors
        - name: unreachable-code

        # Functions or methods with unused parameters can be a symptom of an unfinished refactoring or a bug.
        - name: unused-parameter

        # Replace instances of interface{} with any.
        - name: use-any

        # report when a variable declaration can be simplified
        - name: var-declaration

        # warns when initialism, variable or package naming conventions are not followed.
        - name: var-naming

    tagliatelle:
      case:
        rules:
          db: snake
          json: snake
          yaml: snake
          toml: snake
          mapstructure: snake
          env: upperSnake
          envconfig: upperSnake

        # Uses the struct field name to check the name of the struct tag.
        use-field-name: false

output:
  # Order to use when sorting results.
  # Possible values: `file`, `linter`, and `severity`.
  # If the severity values are inside the following list, they are ordered in this order:
  #   1. error
  #   2. warning
  #   3. high
  #   4. medium
  #   5. low
  #
  # Either they are sorted alphabetically.
  sort-order:
    - linter
    - severity
    - file # filepath, line, and column.
